<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd"[]>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>CHAPTER 3 openFrameworks and Arduino</title>
<link href="9781430239390.css" rel="stylesheet" type="text/css" />
</head>
<body>
<p class="ChapterNumber"><a id="Chap3" />CHAPTER 3</p>
<p class="chapimage"><img src="images/frontdot.jpg" alt="image"/></p>
<p class="ChapterTitle">openFrameworks and Arduino</p>
<div>
<p class="noindent">openFrameworks is a set of C++ libraries<a id="cXXX.60" /> that provides an easy method of coding audio, video, and graphical components. openFrameworks provides mechanisms to easily connect serial devices and Arduinos to personal computers, making openFrameworks an invaluable tool for Arduino development and a useful next topic for discussion.</p>
<p class="indent">openFrameworks can be compared to interlocking plastic construction bricks in that using individual units does not require knowing how to make them. The libraries of openFrameworks are a lot like boxes of construction bricks, allowing creativity to flow without having to code from the ground up and always having a piece that will work. This is done by utilizing C++ object-oriented programming methods, which add abstraction and reusability. The advantage to openFrameworks in a development scene is that you can put together proofs of concept without having to do a lot of low-level coding. Working in openFrameworks also provides working code that can be used as a blueprint to migrate from when a final project goes into production and needs more optimizations.</p>
<p class="indent">Incorporating both openFrameworks and Arduino helps create a proof-of-concept environment for hardware and software interaction, which uses a development approach that &#x201C;work fosters ideas&#x201D;; an exploratory development style where ideas can be explored without waste. The key to this is reusability<a id="cXXX.61" />: not having to worry about permanently using a resource and having plenty components to play with. The combination of openFrameworks and Arduino is cross compatible on most systems.</p>
<p class="indent">The disadvantages<a id="cXXX.62" /> to this setup are that it may not be production quality, optimized, reliable, or usable for the masses; things that are arguably less important than sharing and exploration in idea generation. The disadvantages are taken care of when moving away from the proof of concept to a prototype or putting the project into production. For developers, showing an idea is more impressive when that idea is something that can be fully manipulated. Physical models<a id="cXXX.63" /> go a long way toward helping ideas to take life and can be easily created with clay, wood, 3D printing, or various other means. Adding openFrameworks and Arduinos to a physical model can, for example, help you create a new game controller design that can be used to play games.</p>
<p class="indent">Arduino and openFrameworks comprise a nice tool set to help breathe that extra life into an idea. With its simple code structure, designers, artists, it gives developers the ability to add buttons to make LEDs blink, create controllers to move virtual objects, and make systems that manipulate physical objects. Both Arduino and openFrameworks have vast online communities and a plethora of other documentation, making the knowledge to work and develop with these systems easily available. This chapter focuses on connecting the Arduino to computers via openFrameworks to expand the functionality of the Arduino.</p>
<p id="Sec1" class="Heading1">Getting Started</p>
<p class="noindent">To get started, make sure that the openFrameworks and Arduino software are set up and working, and also make sure there is a compatible Arduino board (e.g., an Uno, Leonardo or Nano) available. To download and install<a id="cXXX.64" /> openFrameworks, go to <span class="FontName2"><a href="http://www.openframeworks.cc">www.openframeworks.cc</a></span> and follow the setup instructions for your system. openFrameworks requires C++ and is built for integrated development environments (IDEs)<a id="cXXX.65" /><a id="cXXX.66" /> such as Code::Blocks (<span class="FontName2"><a href="http://www.codeblocks.org">www.codeblocks.org</a></span>), Visual C++ (<span class="FontName2"><a href="http://www.microsoft.com/express">www.microsoft.com/express</a></span>), and Xcode (<span class="FontName2"><a href="http://developer.apple.com/xcode/">http://developer.apple.com/xcode/</a></span>).</p>
<p class="indent">The first four examples in this chapter (<a href="#list1">Listings 3-1</a> to <a href="#list4" id="_list4">3-4</a>) show how to set up serial communications. All the examples are written using Arduino 1.0.1 and openFrameworks version 0071 but have been tested with Arduino 1.5.1r2 and openFrameworks 0073.</p>
<p id="Sec2" class="Heading1">Arduino Code</p>
<p class="noindent"><a href="#list1" id="_list1">Listing 3-1</a> shows the code to set up the Arduino, connect to a push button on pin 8, and check if the button is pressed or released and report the change in this state to a serial connection using a character. The code also checks for an incoming character from the serial; <span class="FontName2">a</span> and <span class="FontName2">s</span> signify turning on and off an LED on pin 13, respectively. This passing of characters is important when developing code for openFrameworks to control the Arduino, thus making the Arduino a possible controller for a game, a sensor for a door, and so on.</p>
<p class="noindent2"><a href="#_list1" id="list1"><b><i>Listing 3-1.</i></b></a>&#160;&#160;Arduino Sketch That Sets Up<a id="cXXX.67" />the Arduino</p>
<pre><span class="FontName2">int button = 8 , ledPin = 13; // pin assignments: button on pin 8,LED on pin 13</span><br /><span class="FontName2">boolean oldState = 0 , newState = 0;&#160;&#160;&#160;&#160; // state change variables</span><br /><span class="FontName2">void</span><b>setup</b><span class="FontName2">() {</span><br />&#160;&#160;<span class="FontName2">pinMode(button, INPUT);&#160;&#160;&#160;&#160; ////////////////////////////</span><br />&#160;&#160;<span class="FontName2">pinMode(ledPin,OUTPUT);&#160;&#160;&#160;&#160; // set pin I/O types</span><br />&#160;&#160;<span class="FontName2">Serial.begin(9600);&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // starts serial at baud rate 9600</span><br /><span class="FontName2">} // end setup()</span><br /><span class="FontName2">void</span><b>loop</b><span class="FontName2">() {</span><br />&#160;&#160;<span class="FontName2">newState = digitalRead(button); // save current button state</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">if(newState != oldState){&#160;&#160;&#160;&#160; // test for change in button state</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">if (newState&#160;&#160;== true)&#160;&#160;&#160;&#160;&#160;&#160;// for button press, send the &quot;h&quot; to serial</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">Serial.print(&#x0027;h&#x0027;);</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">if (newState&#160;&#160;== false)&#160;&#160;&#160;&#160;// for button release, send the &quot;l&quot; to serial</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">Serial.print(&#x0027;l&#x0027;);</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">} // end if(state0 != state1)</span><br />&#160;&#160;<span class="FontName2">oldState = newState;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// save new state to old state for comparison</span><br />&#160;&#160;<span class="FontName2">delay(40);&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// delay for bounce control</span><br /><span class="FontName2">} // end void loop()</span><br /><span class="FontName2">void</span><b>serialEvent</b><span class="FontName2">() { // called upon incoming serial</span><br />&#160;&#160;<span class="FontName2">switch (Serial.read()){&#160;&#160;// determine if serial is one of the required inputs</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">case &#x0027;a&#x0027;:&#160;&#160;digitalWrite(ledPin, HIGH);</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">break;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// for input of &quot;a&quot;, turn on LED</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">case &#x0027;s&#x0027;:&#160;&#160;digitalWrite(ledPin, LOW);</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">break;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// for input of &quot;s&quot;, turn off LED</span><br />&#160;&#160;<span class="FontName2">}&#160;&#160; // end switch (Serial.read())</span><br /><span class="FontName2">}&#160;&#160;&#160;&#160; // end serialEvent()</span></pre>
<div class="notepara">
<p class="paraaftertitle1"><img src="images/sq.jpg" alt="image"/>&#160;<b>Note</b>&#160;&#160;The serialEvent() function does not work with the Leonardo board. To convert for the Leonardo board change void serialEvent() to if (Serial.available() &#x003E; 0) and move the loop ending bracket to below the ex void serialEvent() function.</p></div>
<div>
<p id="Sec3" class="Heading2">Verifying the Code<a id="cXXX.26f" /><a id="cXXX.68" /></p>
<p class="noindent">Load <a href="#list1">Listing 3-1</a> and hook up the Arduino with a momentary push-button switch and a pull-down resistor hooked to pin 8. The LED set up on pin 13 is optional because the Arduino has one on the board. With the board set up as per <a href="#Fig1" id="_Fig1">Figure 3-1</a> and plugged in, start the serial monitor in the Arduino IDE and match the baud rate of 9600. When the button is pressed, it causes an <span class="FontName2">h</span> or an <span class="FontName2">l</span> character to be displayed for a high or low state change. Sending the Arduino an <span class="FontName2">a</span> or an <span class="FontName2">s</span> will turn on or off the LED.</p>
<div class="Figure" id="Fig1">
<p class="img"><img src="images/9781430239390_Fig03-01.jpg" alt="9781430239390_Fig03-01.jpg" /></p>
<p class="FigCapt"><span class="CaptNr"><a href="#_Fig1">Figure 3-1</a> </span>.&#160;&#160;Arduino circuit<a id="cXXX.69" /><a id="cXXX.58m" /> for <a href="#list1">Listing 3-1</a> </p>
</div>
<div>
<p id="Sec4" class="Heading2">Arduino Serial Functions<a id="cXXX.70" /></p>
<p class="noindent">Listed following is a reference of Arduino serial functions and what they are used for. These functions reside in the predefined <span class="FontName2">Serial</span> object. To call any of the serial functions, use <span class="FontName2">Serial.</span> before the name, like so:</p>
<p class="indent"><span class="FontName2">Serial.begin(9600);</span></p>
<ul class="bulleted">
<li><span class="FontName2">void begin(speed)</span>: Opens and sets a serial port at a baud speed equal to an unsigned long. Returns nothing.</li>
<li><span class="FontName2">void end()</span>: Closes the serial connection, releasing the TX and RX pins.</li>
<li><span class="FontName2">int available()</span>: Checks for data in the serial buffer and returns the number of bytes in the buffer.</li>
<li><span class="FontName2">int read()</span>: Returns the first incoming byte in the serial buffer as an <span class="FontName2">int</span>, and then removes the byte. Successive reads will move through the buffer, much like dealing a deck of cards.</li>
<li><span class="FontName2">int peek()</span>: Reads the incoming serial buffer&#x2019;s first byte, returns as an <span class="FontName2">int</span>, and leaves the data in the buffer. This function is like peeking at the top card of a deck of cards.</li>
<li><span class="FontName2">void flush()</span>: Clears the serial buffer&#x2019;s data. <span class="FontName2">flush()</span> will clear data after the buffer data is sent out.</li>
<li><span class="FontName2">size_t print / println (value, format)</span>: Sends a human-readable translation of data. Digits are sent as ASCII-equivalent strings, and characters are sent as bytes. This function can have a format of DEC, HEX, BIN, or OCT. <span class="FontName2">format</span> can also be used to define the number of bytes to send. <span class="FontName2">println</span> is the same as <span class="FontName2">print</span>, except it sends a new line to the end of the value. Returns the number of bytes sent; reading is not required.</li>
<li><span class="FontName2">size_t write(value, size)</span>: Sends data in binary bytes instead of ASCII. <span class="FontName2">write()</span> can send a single byte value, in which case <span class="FontName2">size</span> is not needed. A string and buffer are sent as a series of bytes. <span class="FontName2">size</span> declares the buffer&#x2019;s number of bytes to send. Returns the number of bytes sent.</li>
<li><span class="FontName2">void serialEvent(){ }</span>: Can be added to a sketch that is called any time there is incoming serial activity.</li>
</ul>
</div>
<p id="Sec5" class="Heading1">openFrameworks Setup</p>
<p class="noindent">With the Arduino code outputting and accepting input from the serial monitor, other programs can be developed using C, C++, Java, or any other computer language from scratch to connect the Arduino to the computer. Coding from scratch, however, can be a bit tedious for a proof-of-concept project<a id="cXXX.71" />. openFrameworks provides a nice prebuilt interface for programming serial with C++ and also adds many other useful tidbits for audio and graphics. The next set of examples will show how the openFrameworks libraries can be used to connect to the Arduino and the sketch from <a href="#list1">Listing 3-1</a>.</p>
<p class="indent">To verify that openFrameworks is working properly and the library is compiled, make a copy of the empty example folder in the openFrameworks distribution; keep the folder in the same directory and rename it to <span class="FontName2">ch3</span>.</p>
<div class="notepara">
<p class="paraaftertitle1"><img src="images/sq.jpg" alt="image"/>&#160;<b>Note</b>&#160;&#160;The examples are located in the openFrameworks <span class="FontName2">examples</span> directory. An empty example to start with is located in the <span class="FontName2">apps/myApps</span> subdirectory of the openFrameworks main directory.</p></div>
<p class="indent">Open the workspace for Code::Blocks or the VC++ project file in the renamed folder, and then compile. Two things should compile: <span class="FontName2">emptyexample</span><a id="cXXX.72" /> and <span class="FontName2">libopenFrameworks</span><a id="cXXX.73" />. After both parts are compiled successfully, openFrameworks is ready for new code. Coding the examples in this chapter for openFrameworks applications is done in the Code::Blocks project file or the Microsoft Visual Studio solution (<i>not</i> the one named <span class="FontName2">libopenFrameworks</span>, but the one named after the project&#x2014;e.g., <span class="FontName2">emptyexample.workspace</span>). The files for the examples in this chapter are available for download from <a href="http://www.apress.com/9781430239390">www.apress.com/9781430239390</a> and are contained in three files: <span class="FontName2">main.cpp</span>, <span class="FontName2">testapp.cpp</span>,and <span class="FontName2">testapp.h</span>. These three files can replace the files with the same name that are in the renamed folder <span class="FontName2">src</span> directory.</p>
<div class="notepara">
<p class="paraaftertitle1"><img src="images/sq.jpg" alt="image"/>&#160;<b>Caution</b>&#160;&#160;Moving and compiling projects outside of the openFrameworks <span class="FontName2">apps/examples</span> directory may cause dependencies issues<a id="cXXX.74" />. To solve this, point all the dependencies to the location of the openFrameworks main directory.</p></div>
<div class="Sidebar"><span class="FontName3" /> In 32-bit GNU/Linux<a id="cXXX.75" />, the workspace file for Code::Blocks may point to the 64-bit libraries. Solve this by opening the workspace file in a generic text editor and change <span class="FontName2">linux64</span> to <span class="FontName2">linux</span>.</div>
<div>
<p id="Sec6" class="Heading2">Connecting to the Arduino from openFrameworks</p>
<p class="noindent"><a href="#list2" id="_list2">Listings 3-2</a> through 3-4 make up the three files to create and run a basic openFrameworks program to connect to an Arduino to send and receive data without having to use the serial monitor or console, while also providing extra computing power by allowing the Arduino to connect to a C++ program.</p>
<p class="noindent2"><a href="#_list2" id="list2"><b><i>Listing 3-2.</i></b></a>&#160;&#160;main.cpp<a id="cXXX.76" /><a id="cXXX.77" /></p>
<pre><span class="FontName2">#include &quot;ofMain.h&quot;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // include files</span><br /><span class="FontName2">#include &quot;testApp.h&quot;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// declarations for the testapp class</span><br /><span class="FontName2">#include &quot;ofAppGlutWindow.h&quot;&#160;&#160;// for using OpenGL and creating windows</span><br /><span class="FontName2">int main() {</span><br />&#160;&#160; <span class="FontName2">ofAppGlutWindow window;&#160;&#160;&#160;&#160;// sets up an OpenGL window object</span><br />&#160;&#160; <span class="FontName2">ofSetupOpenGL(&#x0026;window,200,100, OF_WINDOW);&#160;&#160;//sets window size in pixels</span><br />&#160;&#160; <span class="FontName2">ofRunApp(new testApp());&#160;&#160; // create testapp object &#x0026; enter program loop</span><br /><span class="FontName2">} // end int main()</span></pre>
<p class="indent">openFrameworks code is set up to be event driven and window based, the same as other graphical-interface programs. The <span class="FontName2">main.cpp</span> file contains the <span class="FontName2">main()</span> function, which is the entry point to the openFrameworks programs. The <span class="FontName2">main()</span> function sets parameters for the window, including the window size and window mode. It is rare to make many changes in <span class="FontName2">main.cpp</span>; most of the time the only thing that will change is the window size.</p>
<p class="noindent2"><b><i>Listing 3-3.</i></b>&#160;&#160;testapp.h<a id="cXXX.78" /><a id="cXXX.79" /></p>
<pre><span class="FontName2">#include &quot;ofMain.h&quot;</span><br /><span class="FontName2">class testApp : public ofBaseApp{</span><br />&#160;&#160;<span class="FontName2">public:</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void setup();&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// for setting initial parameters</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void update();&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // code in this function is constantly run, events will interrupt</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void draw();&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // runs after update,this updates &#x0026; creates the window objects</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void mousePressed(int x, int y, int button);&#160;&#160;// on event function</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">bool SendSerialMessage;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // signals that data needs to be sent</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">char ledcommand ;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // hold what state the LED is in</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">char Returned;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// hold returned char from Arduino</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ofSerial serial;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// this is the object to handle serial</span><br /><span class="FontName2">};// end class testApp : public ofBaseApp</span></pre>
<p class="indent">The <span class="FontName2">testApp</span> class inherits common functionality from the <span class="FontName2">ofBaseApp</span> class. This is where the function prototypes are created. Variables that will be used in many functions can be declared here. There is a set of functions that are called when events occur, such as mouse movement or using the keyboard. Note the line where you need to change <span class="FontName2">COM4</span> to match your Arduino setup.</p>
<p class="noindent2"><a href="#_list4" id="list4"><b><i>Listing 3-4.</i></b></a>&#160;&#160;testapp.cpp<a id="cXXX.80" /><a id="cXXX.81" /></p>
<pre><span class="FontName2">#include &quot;testApp.h&quot;</span><br /><span class="FontName2">void testApp::setup(){</span><br />&#160;&#160;<span class="FontName2">ofSetVerticalSync(true);&#160;&#160;&#160;&#160;&#160;&#160;// helps to smooth out object drawing</span><br />&#160;&#160;<span class="FontName2">ofBackground(255,255,255);&#160;&#160;&#160;&#160;// set background color to an RGB value</span><br />&#160;&#160;<span class="FontName2">serial.setup(&quot;COM7&quot;, 9600);&#160;&#160; // change &quot;COM7&quot; to match where the Arduino is</span><br />&#160;&#160;<span class="FontName2">ledcommand = &#x0027;s&#x0027;;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // set initial state of the LED</span><br />&#160;&#160;<span class="FontName2">serial.writeByte(ledcommand); // tell Arduino of the initial state</span><br />&#160;&#160;<span class="FontName2">SendSerialMessage = false;&#160;&#160;&#160;&#160;// nothing to send yet</span><br /><span class="FontName2">} // end void testApp::setup()</span><br />&#160;<span class="FontName2">void testApp::update(){</span><br />&#160;&#160;<span class="FontName2">if (SendSerialMessage)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// is there serial information that needs to be sent</span><br />&#160;&#160; <span class="FontName2">serial.writeByte(ledcommand);&#160;&#160;// tell the Arduino to change LED state</span><br />&#160;&#160;<span class="FontName2">if (serial.available())&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // check to see if there is incoming data</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">Returned = serial.readByte(); // save the incoming data</span><br />&#160;&#160;<span class="FontName2">SendSerialMessage = false;&#160;&#160;&#160;&#160;&#160;&#160;// reset the need to send data to the Arduino</span><br /><span class="FontName2">}//end testApp::update</span><br /><span class="FontName2">void testApp::draw(){&#160;&#160;&#160;&#160;// defines placement and draws objects in the window</span><br />&#160;&#160;<span class="FontName2">ofFill();&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// fills geometry with a solid color</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">if (Returned == &#x0027;h&#x0027;)&#160;&#160;&#160;&#160; // is the button on the Arduino being pressed</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(0,0,255);&#160;&#160; // set the first circle color to full blue</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">else&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // the button is not pressed or the state is not known</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(0,0,127);&#160;&#160; // set the first circle color to 1/2 blue</span><br />&#160;&#160;<span class="FontName2">ofCircle(50,50, 50);&#160;&#160;&#160;&#160;&#160;&#160; // draw the first circle at last set color</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">if (ledcommand == &#x0027;a&#x0027;)&#160;&#160; // should the LED be on</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(0,255,0);&#160;&#160; // set color to full green for the second circle</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">else&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // LED should be off or not known</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(0,127,0);&#160;&#160; // set color to 1/2 green for the second circle</span><br />&#160;&#160; <span class="FontName2">ofCircle(150,50, 50);&#160;&#160;&#160;&#160; // draw the second circle at last set color</span><br /><span class="FontName2">} //end void testApp::draw()</span><br /><span class="FontName2">void testApp::mousePressed(int x, int y, int button){</span><br />&#160;&#160;<span class="FontName2">SendSerialMessage = true;&#160;&#160;// inform update function that there is data to send</span><br />&#160;&#160;<span class="FontName2">if(ledcommand == &#x0027;a&#x0027;)&#160;&#160;&#160;&#160;&#160;&#160;// if the LED is ON</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ledcommand = &#x0027;s&#x0027;;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// change LED to be OFF</span><br />&#160;&#160;<span class="FontName2">else&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // if the LED is OFF</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ledcommand = &#x0027;a&#x0027;;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// change LED to be ON</span><br /><span class="FontName2">} //end testApp::mousePressed</span></pre>
</div>
<div>
<p id="Sec7" class="Heading2">Verifying the Code<a id="cXXX.82" /></p>
<p class="noindent">Make sure that the Arduino that was set up in <a href="#list1">Listing 3-1</a> is plugged into the computer and take note of the port that it is plugged into.</p>
<ul class="bulleted">
<li><span class="FontName2">COM*</span> is for Windows</li>
<li><span class="FontName2">/dev/tty*</span> is used for Linux/Unix and Mac OS X</li>
</ul>
<p class="indent">Change the <span class="FontName2">serial.setup(COM4,9600)</span> line in <a href="#list4">Listing 3-4</a> to match the Arduino&#x2019;s connecting point. Once the test app is set to know where the Arduino is, compile the examples. Running the program will open a window frame that looks like <a href="#Fig2" id="_Fig2">Figure 3-2</a>, with the first circle representing the push button and the second circle showing the state of the LED. To change the LED state, click in the window with the mouse.</p>
<div class="Figure" id="Fig2">
<p class="img"><img src="images/9781430239390_Fig03-02.jpg" alt="9781430239390_Fig03-02.jpg" /></p>
<p class="FigCapt"><span class="CaptNr"><a href="#_Fig2">Figure 3-2</a> </span>.&#160;&#160;Example of the running program </p>
</div>
<div>
<p id="Sec8" class="Heading2">openFrameworks Serial Functions<a id="cXXX.83" /></p>
<p class="noindent">The following reference list is for the openFrameworks serial functions. Most of the functions work just like the Arduino&#x2019;s counterpart functions. The serial object must be declared before using and calling the openFrameworks serial functions. The serial object comes from the <span class="FontName2">ofSerial</span> class<a id="cXXX.84" />; just as a variable is declared, a serial object is created by using the following:</p>
<pre><span class="FontName2">ofSerial serial;</span></pre>
<p class="indent">To use any of the functions, use the name declared for the object&#x2014;for example, <span class="FontName2">serial.setup();</span>. Here are the functions:</p>
<ul class="bulleted">
<li><span class="FontName2">void enumerateDevices()</span>: Lists the available serial devices.</li>
<li><span class="FontName2">void close()</span>: Closes the serial connection.</li>
<li><span class="FontName2">bool setup(int, int)</span>: Connects to the device number corresponding to the list outputted by <span class="FontName2">enumerateDevices</span><b>()</b> at the desired baud speed.</li>
<li><span class="FontName2">bool setup()</span>: Opens a serial connection on the first available device at baud 9600 and returns a fail or succeed.</li>
<li><span class="FontName2">bool setup(string, int)</span>: Uses a string to declare what serial device to connect to. The second parameter sets the baud speed and returns a fail or succeed.</li>
<li><span class="FontName2">int readBytes(unsigned char, int)</span>: Takes a pointer to an array of characters, attempts to retrieve the number of bytes equal to the second parameter, and returns the number of actual bytes read (compare to the requested amount of bytes to error-check).</li>
<li><span class="FontName2">int readByte()</span>: Returns a single byte from the connected device.</li>
<li><span class="FontName2">int writeBytes(unsigned char, int)</span>: Takes a character array or string and an amount of bytes to write, and returns the amount written for error checking.</li>
<li><span class="FontName2">bool writeByte(unsigned char)</span>: Sends a single byte to the connected device and returns a fail or succeed.</li>
<li><span class="FontName2">void flush(bool, bool)</span>: Clears one or both of the serial buffers (one buffer for send, one buffer for receive).</li>
<li><span class="FontName2">int available()</span>: Returns the number of available bytes in the receive buffer.</li>
</ul>
</div>
<p id="Sec9" class="Heading1">Coding Once Using Firmata and ofArduino</p>
<p class="noindent">In keeping with the spirit of &#x201C;work fosters ideas,&#x201D; working with two different pieces of code (one on the Arduino and one using openFrameworks) is a bit inefficient for exploring ideas, especially when changing things frequently. Luckily, there are items included with the Arduino IDE and openFrameworks (a program for the Arduino and a built-in class for openFrameworks) that make it possible to write single programs that take care of having to separately code the Arduino.</p>
<ul class="bulleted">
<li>Firmata is a communication protocol for the Arduino that allows for on-the-fly configurations<a id="cXXX.85" /><a id="cXXX.86" /> without having to restart or reprogram the Arduino. Standard Firmata is included with the Arduino IDE.</li>
<li>openFrameworks complements Firmata by including a class called <span class="FontName2">ofArduino</span>, which handles both communication and configuration of the Arduino.</li>
</ul>
<div>
<p id="Sec10" class="Heading2">Setting Up Firmata<a id="cXXX.54a" /></p>
<p class="noindent">Set up the Arduino board with the components connected as in the schematic in <a href="#Fig3" id="_Fig3">Figure 3-3</a><a id="cXXX.87" /><a id="cXXX.88" />, and then upload the Standard Firmata sketch. The sketch is located in the Arduino IDE under File <img src="images/arrow.jpg" alt="image" /> Examples <img src="images/arrow.jpg" alt="image" /> Firmata <img src="images/arrow.jpg" alt="image" /> StandardFirmata.</p>
<div class="Figure" id="Fig3">
<p class="img"><img src="images/9781430239390_Fig03-03.jpg" alt="9781430239390_Fig03-03.jpg" /></p>
<p class="FigCapt"><span class="CaptNr"><a href="#_Fig3">Figure 3-3</a> </span>.&#160;&#160;Arduino circuit for <a href="#list5">Listing 3-5</a> </p>
</div>
<p class="indent">To verify that Firmata is working on the Arduino, download and run the test app from <a href="http://www.firmata.org/">www.firmata.org/</a>. Select the port to connect to from the drop-down menu, and the app will show all the pins, which have drop-down boxes for pin configuration and buttons for output values, as shown in <a href="#Fig4" id="_Fig4">Figure 3-4</a><a id="cXXX.89" /><a id="cXXX.90" />.</p>
<div class="notepara">
<p class="paraaftertitle"><img src="images/sq.jpg" alt="image"/>&#160;<b>Note</b>&#160;&#160;The Leonardo need the Firmata library updated. Instructions and updated library available at <a href="http://www.github.com/soundanalogous/Breakout/wiki/Updating-Firmata-in-Arduino">www.github.com/soundanalogous/Breakout/wiki/Updating-Firmata-in-Arduino</a></p></div>
<div class="Figure" id="Fig4">
<p class="img"><img src="images/9781430239390_Fig03-04.jpg" alt="9781430239390_Fig03-04.jpg" /></p>
<p class="FigCapt"><span class="CaptNr"><a href="#_Fig4">Figure 3-4</a> </span>.&#160;&#160;Firmata<a id="cXXX.74t" /> testing application </p>
</div>
<p class="indent">The Firmata test app is especially usefully for testing out component setups that use multiple pins, such as a three- to eight-line MUXs, seven-segment displays , keypads, and servomotors.</p>
<div>
<p id="Sec11" class="Heading2">Controlling the Arduino with openFrameworks</p>
<p class="noindent">The code in the next example uses the same <span class="FontName2">main.cpp</span> as <a href="#list2">Listing 3-2</a>. The header file <span class="FontName2">testapp.h</span> in <a href="#list5" id="_list5">Listing 3-5</a> still declares the class function prototypes<a id="cXXX.91" /><a id="cXXX.92" /><span class="FontName2">setup()</span><i>,</i><span class="FontName2">update()</span><i>,</i><span class="FontName2">draw()</span>, and <span class="FontName2">mousePressed()</span>. The two new function prototypes are set up to mimic the Arduino&#x2019;s coding structure. The function <span class="FontName2">arduinoSetup()</span> is for initializing pin configurations, and the function <span class="FontName2">arduinoLoop()</span> is the equivalent to <span class="FontName2">loop</span> in Arduino sketches.</p>
<p class="noindent2"><a href="#_list5" id="list5"><b><i>Listing 3-5.</i></b></a>&#160;&#160;testapp.h<a id="cXXX.93" /><a id="cXXX.94" /><i>for the Standard Firmata Sketch Communication</i></p>
<pre><span class="FontName2">#include &quot;ofMain.h&quot;</span><br /><span class="FontName2">#include &quot;ofEvents.h&quot;</span><br /><span class="FontName2">class testApp : public ofBaseApp {</span><br />&#160;&#160;<span class="FontName2">public:</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void setup();</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void update();</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void draw();</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void mousePressed(int x, int y, int button);</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void arduinoSetup(const int &#x0026; version); // Arduino equivalent setup function</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">void arduinoLoop(); // Arduino-equivalent loop function</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">bool ledcommand;</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">bool pin13; // pin13 data container</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">bool pin8; // pin8 data container</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">float analogPin0; // pin8 data container</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">bool isArduinoSet; // flag to know when Arduino is connected and configured</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ofArduino arduino; // the Arduino object</span><br /><span class="FontName2">}; // end class testApp : public ofBaseApp</span></pre>
<p class="indent">In <span class="FontName2">testapp.cpp</span> of <a href="#list6" id="_list6">Listing 3-6</a>, the functions <span class="FontName2">arduinoSetup()</span><a id="cXXX.95" /><a id="cXXX.96" /><a id="cXXX.97" /> and <span class="FontName2">arduinoLoop()</span><a id="cXXX.98" /><a id="cXXX.99" /><a id="cXXX.100" /> perform the same functions of an Arduino sketch with openFrameworks on top of the Arduino-style functions. Firmata and the openFrameworks <span class="FontName2">ofArduino</span> class make the serial communication less apparent. By carefully mimicking the same structure as an Arduino sketch, the conversion to an actual Arduino sketch is made simpler if the conversion becomes necessary, as when moving to a more professional setup. Keep in mind it is possible to develop code in openFrameworks that may require more space and computing power than might be available on the Arduino. This is especially important to remember when using Firmata as a tool in making proofs of concept to eventually be used solely on the Arduino.</p>
<div class="notepara">
<p class="paraaftertitle1"><img src="images/sq.jpg" alt="image"/>&#160;<b>Note</b>&#160;&#160;Firmata is capable of using I2C and other communication functionality; however, openFrameworks does not currently support I2C functionality<a id="cXXX.101" /><a id="cXXX.102" /> (as of version 0071).</p></div>
<p class="noindent2"><a href="#_list6" id="list6"><b><i>Example 3-6.</i></b></a>&#160;&#160;testapp.cpp<a id="cXXX.103" /><a id="cXXX.104" />for Standard Firmata Communication</p>
<pre><span class="FontName2">#include &quot;testApp.h&quot;</span><br /><span class="FontName2">void testApp::setup() {</span><br />&#160;&#160;<span class="FontName2">arduino.connect(&quot;COM7&quot;); // remember! change this to the proper port</span><br />&#160;&#160;<span class="FontName2">ofAddListener(arduino.EInitialized, this, &#x0026;testApp::arduinoSetup);</span><br />&#160;&#160;<span class="FontName2">/*the ofAddListener waits for the Arduino to perform a handshake telling the program that it is ready to be configured and set up. This will call arduinoSetup*/</span><br />&#160;&#160;<span class="FontName2">isArduinoSet = false; // this flag is set false until the Arduino is set up</span><br /><span class="FontName2">} // end void testApp::setup()</span><br /><span class="FontName2">void testApp::update() {</span><br />&#160;&#160;<span class="FontName2">testApp::arduinoLoop();// perform the Arduino-style code</span><br /><span class="FontName2">} // end void testApp::update()</span><br /><span class="FontName2">void testApp::draw() { // objects are drawn to the screen in the order called</span><br />&#160;&#160;<span class="FontName2">if (isArduinoSet){ // do not run this code until Arduino is operating</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ofFill();</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">if(pin8 == ARD_HIGH)</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(0,0,255);// if button on pin8 pressed, brighten the circle</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">else</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(0,0,127);// blue is dim if button is released</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ofCircle(50,50,50); // draw circle at (x,y,radius) in pixels for button</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">if(pin13 == ARD_HIGH)</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(0,255,0); // when LED is on, draw full green</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">else</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(0,127,0);// green is dimmed when LED is off</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ofCircle(150,50, 50); // draw circle at (x,y,radius) in pixels for LED</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ofSetColor(255,0,0); // set color for analog potentiometer</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">// draw rectangle with corners at (x1,y1,x2,y2)</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">ofRect(0, 45 ,(analogPin0*200) , 10); // rectangle is dynamic on the x-axis</span><br />&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span class="FontName2">// analogPin0 is a percentage multiplied by window width</span><br />&#160;&#160;<span class="FontName2">} // end if (isArduinoSet)</span><br /><span class="FontName2">}// end void testApp::draw()</span><br /><span class="FontName2">void testApp::mousePressed(int x, int y, int button) {</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">if(ledcommand == true) // if LED is ON</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ledcommand = false ;&#160;&#160; // flag the LED to turn OFF</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">else // the LED is OFF</span><br />&#160;&#160;&#160;&#160;&#160;&#160;<span class="FontName2">ledcommand = true; // flag the LED to turn ON</span><br /><span class="FontName2">}// end testApp::mousePressed</span><br /><span class="FontName2">void testApp::arduinoSetup(const int &#x0026; version) {</span><br />&#160;&#160;<span class="FontName2">ofRemoveListener(arduino.EInitialized, this, &#x0026;testApp::arduinoSetup);</span><br />&#160;&#160;<span class="FontName2">// there is no need to continue to listen for the Arduino, so clear memory</span><br />&#160;&#160;<span class="FontName2">arduino.sendAnalogPinReporting(0, ARD_ANALOG);// turn on analog pin0</span><br />&#160;&#160;<span class="FontName2">arduino.sendDigitalPinMode(8, ARD_INPUT);// set digital pin8 as input</span><br />&#160;&#160;<span class="FontName2">arduino.sendDigitalPinMode(13, ARD_OUTPUT);// set digital pin13 as output</span><br />&#160;&#160;<span class="FontName2">isArduinoSet = true;// inform the rest of the program that Arduino is ready</span><br /><span class="FontName2">}//end void testApp::arduinoSetup(</span><br /><span class="FontName2">void testApp::arduinoLoop() {</span><br /><span class="FontName2">// do not run this code until Arduino is operating</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">if (isArduinoSet){</span><br />&#160;&#160;&#160;&#160; <span class="FontName2">pin8 = arduino.getDigital(8);// digital read pin8</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">pin13 = arduino.getDigital(13);// digital read pin13 verifying state</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">analogPin0 = arduino.getAnalog(0)/1023.0; // analog read A0</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">arduino.sendDigital(13, ledcommand);// digital write new state</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">}// end if (isArduinoSet)</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">arduino.update();// get any changes that the Arduino might have</span><br /><span class="FontName2">}// end void testApp::arduinoLoop()</span></pre>
</div>
<div>
<p id="Sec12" class="Heading2">Verifying the Code<a id="cXXX.105" /><a id="cXXX.106" /></p>
<p class="noindent">When done looking over and compiling the code, plug in the Arduino with the components set up in as <a href="#Fig3">Figure 3-3</a> and the standard Firmata sketch uploaded. When running, the program will open a window with the same size as the prior example. The program will also have the same two circles representing the button and LED, respectively performing the same functions. A red bar is added to the program that will go from side to side, representing the full sweep of the potentiometer.</p>
<div class="notepara">
<p class="paraaftertitle1"><img src="images/sq.jpg" alt="image"/>&#160;<b>Note</b>&#160;&#160;The Arduino may be required to reset, via the reset button, before the listener initializes and recognizes the Arduino. The listener is built into openFrameworks to listen for an Arduino on the connection.</p></div>
</div>
<div>
<p id="Sec13" class="Heading2">Key Constants<a id="cXXX.107" /> Used by ofArduino <a id="cXXX.108" /></p>
<p class="noindent"><span class="FontName2">ofArduino<a id="cXXX.155v" /></span><a id="cXXX.58c" /> defines some useful constants for more readable code. The following list is a reference of names and values of the constants. The first part of the constants, <span class="FontName2">ARD</span>, is short for <i>Arduino</i>, and is a reminder that this is dealing with the hardware. The second part is the type&#x2014;for example, the pin modes or state declarations.</p>
<ul class="bulleted">
<li>Pin modes:</li></ul>
<ul class="bulletedin">
<li><span class="FontName2">ARD_INPUT</span> = 0x00</li>
<li><span class="FontName2">ARD_OUTPUT</span> = 0x01</li>
<li><span class="FontName2">ARD_ANALOG</span> = 0x02</li>
<li><span class="FontName2">ARD_PWM</span> = 0x03</li>
<li><span class="FontName2">ARD_SERVO</span> = 0x04</li>
</ul>
<ul class="bulleted">
<li>Pin states:</li></ul>
<ul class="bulletedin">
<li><span class="FontName2">ARD_HIGH</span> or <span class="FontName2">ARD_ON</span> = 1</li>
<li><span class="FontName2">ARD_LOW</span> or <span class="FontName2">ARD_OFF</span> = 0</li>
</ul>
</div>
<div>
<p id="Sec14" class="Heading2">ofArduino Reference of Class Functions<a id="cXXX.109" /><a id="cXXX.110" /></p>
<p class="noindent">The following list is a reference for the class functions that make up the <span class="FontName2">ofArduino</span> class. The functions that are included in the <span class="FontName2">ofArduino</span> class are used to control and connect to Arduinos that have the standard Firmata sketch loaded. Most of the functions are a direct counterpart of the functions used in the Arduino IDE and work the same way; for example, <span class="FontName2">sendDigital()</span> is the same as <span class="FontName2">digitalWrite()</span>. The functions require an <span class="FontName2">ofArduino</span> object declared before they can be used. You can connect multiple Arduinos to the same computer by declaring separate objects for each Arduino.</p>
<ul class="bulleted">
<li><span class="FontName2">bool Connect(port, speed)</span>: Opens an Arduino connection on a serial port and takes a <span class="FontName2">string</span> for the device connection, such as <span class="FontName2">/dev/ttyUSB0</span>, <span class="FontName2">COM4</span> or <span class="FontName2">/dev/tty.usbserial-A4001JEC</span>. The second parameter is for nondefault baud speeds and can be omitted in standard configurations.</li>
<li><span class="FontName2">void disconnect()</span>: Releases the Arduino connection.</li>
<li><span class="FontName2">bool isInitialized()</span>: Returns <span class="FontName2">true</span> if a successful connection has been established and the Arduino has reported that firmware from the Firmata sketch has been uploaded.</li>
<li><span class="FontName2">void update()</span>: Used to update the current state of the Arduino&#x2019;s incoming information; this should be called regularly.</li>
<li><span class="FontName2">void sendDigitalPinMode(pin, mode)</span>: Sets the pin mode of a digital pin (one of pins 2 through 13) and sets the pin as one of the digital modes of <span class="FontName2">ARD_INPUT</span>, <span class="FontName2">ARD_OUTPUT</span>, <span class="FontName2">ARD_PWM</span>, or <span class="FontName2">ARD_SERVO</span>. If the pin is an input, the reporting will be turned on.</li>
<li><span class="FontName2">void sendAnalogPinReporting(pin, mode)</span>: For analog pins 0 through 5, turns the reporting to <span class="FontName2">ARD_ON</span> or <span class="FontName2">ARD_OFF</span>. Analog pins can be used as digital pins 16 through 21 or as PWM pins. The whole group is either analog or digital.</li>
<li><span class="FontName2">void sendDigital(pin, state)</span>: Sets the state of the specified digital pin to either <span class="FontName2">ARD_LOW</span> or <span class="FontName2">ARD_HIGH</span>.</li>
<li><span class="FontName2">void sendPwm(pin, value)</span>: Sets the PWM value for pins set to <span class="FontName2">ADR_PWM</span> (chosen from pins 3, 5, 6, 9, 10, and 11); the value is between <span class="FontName2">ON</span> (255) and <span class="FontName2">OFF</span> (0).</li>
<li><span class="FontName2">void sendServo(pin, sweep)</span>: Uses pin 9 or 10 and sends servo signals between 0 and sweep-angle default 180.</li>
<li><span class="FontName2">void sendServoAttach(pin, min, max, sweep)</span>: Defines the following servo parameters:</li></ul>
<ul class="bulletedin">
<li>The pin</li>
<li>Minimum pulse width (defaults to 544)</li>
<li>Maximum pulse width (defaults to 2400)</li>
<li>Angle of sweep (defaults to 180)</li>
</ul>
<ul class="bulleted">
<li><span class="FontName2">int getDigital(pin)</span>: Used on pins 2 through 13:</li></ul>
<ul class="bulletedin">
<li>For pins set as <span class="FontName2">ARD_INPUT</span> returns the last state the pin reported</li>
<li>For pins set as <span class="FontName2">ARD_OUTPUT</span> returns the last value sent to the pin</li>
</ul>
<ul class="bulleted">
<li><span class="FontName2">int getPwm(pin)</span>: For pins set as <span class="FontName2">ARD_PWM</span>, returns the last set PWM value for the pin requested (usable pins are 3, 5, 6, 9, 10 and 11, or pins 16 through 21 if analog pins 0 through 5 are set as digital pins).</li>
<li><span class="FontName2">int getServo(pin)</span>: Returns the last value the servo was set to.</li>
<li><span class="FontName2">int getAnalog(pin)</span>: Used for analog pins 0 through 5 and returns a value between 0 and1023.</li>
<li><span class="FontName2">string getString()</span>: Returns the last string received.</li>
<li><span class="FontName2">int getDigitalPinMode(pin)</span>: Returns <span class="FontName2">ARD_INPUT</span>, <span class="FontName2">ARD_OUTPUT</span>, <span class="FontName2">ARD_PWM</span>, <span class="FontName2">ARD_SERVO</span>, or <span class="FontName2">ARD_ANALOG</span>.</li>
<li><span class="FontName2">int getAnalogPinReporting(pin)</span>. For analog pins 0 through 5, returns <span class="FontName2">ARD_ON</span> or <span class="FontName2">ARD_OFF</span>.</li>
</ul>
</div>
<p id="Sec15" class="Heading1">Expanding on the Idea</p>
<p class="noindent">We now have openFrameworks<a id="cXXX.59a" /> controlling the Arduino, which is running the standard Firmata sketch. The next example illustrates the increase of efficiency that can be gained in development by having Arduino and openFrameworks integrated<a id="cXXX.111" />.</p>
<ol class="OrderedList">
<li>Start the next example by attaching a servo to pin 10 and another LED to pin 3, in addition to the other components from the last example. Use <a href="#Fig5" id="_Fig5">Figure 3-5</a> for reference.</li>
<li>After the two new components are in place, start the Firmata test app to check that all the components are working.</li>
<li>Set the pins to the following configuration:</li></ol>
<ul class="bulletedin">
<li><span class="FontName2">pin3 = PWM</span></li>
<li><span class="FontName2">pin8 = input</span></li>
<li><span class="FontName2">pin10 = servo</span></li>
<li><span class="FontName2">pin13 = output</span></li>
<li>Analog pin 0</li>
</ul>
<div class="Figure" id="Fig5">
<p class="img"><img src="images/9781430239390_Fig03-05.jpg" alt="9781430239390_Fig03-05.jpg" /></p>
<p class="FigCapt"><span class="CaptNr"><a href="#_Fig5">Figure 3-5</a> </span>.&#160;&#160;Arduino circuit for the &#x201C;Expanding on the Idea<a id="cXXX.111c" />&#x201D; example </p>
</div>
<p class="indent">For the rest of this example, the only changes are going to be to the code.</p>
<p class="indent">For the hardware, the potentiometer is going to control the servo, while the brightness of the LED on pin 3 will represent the position of the servo. When the button is pressed, the LED on pin 13 will turn on; at the same time, the servo and the other LED will pause and stop accepting new values from the potentiometer until the button is released.</p>
<div>
<p id="Sec16" class="Heading2">Changing Code<a id="cXXX.113" /></p>
<p class="noindent">While openFrameworks is controlling the Arduino, it will simultaneously be displaying a representation of what the hardware is doing. The program will have a window the same size as the two prior examples, with shapes representing the button, the LED, and the potentiometer&#x2019;s position. The only change to the graphics is that we will dynamically change the color of the bar to represent the new brightness value for the LED, with the color fading from black to full red with the servo and potentiometer&#x2019;s full swing.</p>
<p class="indent">Open the project from <a href="#list5">Listings 3-5</a> and <a href="#list6">3-6</a>. The same <span class="FontName2">main.cpp</span> will be used without alteration. Within <span class="FontName2">testapp.cpp</span>, the entire <span class="FontName2">mousePressed()</span> function can be removed or commented out, along with its prototype in <span class="FontName2">testapp.h</span>. You can omit the following line from the <span class="FontName2">arduinoLoop()</span> function:</p>
<pre><span class="FontName2">arduino.sendDigital(13, ledcommand);</span></pre>
<p class="indent">The last thing to comment out is the variable declaration <span class="FontName2">bool ledcommand;</span> from <span class="FontName2">testapp.h</span>. With the code that is no longer needed out of the way, change the line <span class="FontName2">ofSetColor(255,0,0);</span>, located in the <span class="FontName2">draw()</span> function, to</p>
<pre><span class="FontName2">ofSetColor((analogPin0*255),0,0);</span></pre>
<p class="indent">This change takes advantage of the analog percent value to evenly change the color in proportion to the bar.</p>
<p class="indent"> Add the following code to the arduinoSetup() function below the code line arduino.sendDigitalPinMode(13, ARD_OUTPUT); defining the new componets. Note that the text following the comment delimiters (<span class="FontName2">//</span>) is optional.</p>
<pre><span class="FontName2" /><br /><span class="FontName2">arduino.sendDigitalPinMode(3, ARD_PWM); // set pin 3 for PWM</span><br /><span class="FontName2">arduino.sendDigitalPinMode(10, ARD_SERVO);// set pin 10 to accept a servo</span><br /><span class="FontName2">arduino.sendServoAttach(10);// define servo information as default</span><br /><span class="FontName2">isArduinoSet = true;</span></pre>
<p class="indent"><a href="#list7" id="_list7">Listing 3-7</a> shows the next portion of code to add, which is the last for this example. The code handles the button pause, the servo, and the PWM LED, and gets inserted into the <span class="FontName2">arduinoLoop()</span> function before the ending bracket of the <span class="FontName2">if (isArduinoSet)</span> statement and after <span class="FontName2">analogPin0 = arduino.getAnalog(0)/1023.0;</span>.</p>
<p class="noindent2"><a href="#_list7" id="list7"><b><i>Listing 3-7.</i></b></a>&#160;&#160;The End of &#x201C;Expanding on the Idea&#x201D; Example</p>
<pre>&#160;&#160;<span class="FontName2">if (pin8 == ARD_HIGH){ // check if button is being pressed</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">pin13 = true; // flag the draw function to change</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">arduino.sendDigital(13, ARD_HIGH);// turn on LED</span><br />&#160;&#160;<span class="FontName2">} // end if pin8 == ARD_HIGH)</span><br />&#160;&#160;<span class="FontName2">else {</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">arduino.sendDigital(13, ARD_LOW);</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">arduino.sendPwm(3,analogPin0*255);</span><br />&#160;&#160;&#160;&#160;<span class="FontName2">arduino.sendServo(10, analogPin0*180);</span><br />&#160;&#160;<span class="FontName2">} // end else</span></pre>
</div>
<div>
<p id="Sec17" class="Heading2">Verifying the Code <a id="cXXX.114" /></p>
<p class="noindent">With all the code changed<a id="cXXX.6r" /> and compiled, start the program with the Arduino plugged in. The program should look like <a href="#Fig6" id="_Fig6">Figure 3-6</a>. When the screen is fully drawn, the pause button will have to be pressed to get the servo and the LED to activate.</p>
<div class="Figure" id="Fig6">
<p class="img"><img src="images/9781430239390_Fig03-06.jpg" alt="9781430239390_Fig03-06.jpg" /></p>
<p class="FigCapt"><span class="CaptNr"><a href="#_Fig6">Figure 3-6</a> </span>.&#160;&#160;The look of the final example </p>
</div>
<p class="indent">The changes that were made make the Arduino act differently without your having to upload a new sketch. Note that the changes now allow the potentiometer to control the sweep of the servo and the brightness of the LED when the potentiometer is swept from maximum to minimum. Also take note of the behavior when the pause is held while the potentiometer is being moved.</p>
<p id="Sec18" class="Heading1">More Ideas to Work<a id="cXXX.115" /> With</p>
<p class="noindent">openFrameworks has a lot more functionality than described in this chapter. openFrameworks can manipulate sound images or even 3D objects, and the connection to serial devices or Arduinos allows controllers to be built that can control the computer. You can create programs to control the Arduino as well. With all the possible projects that you can create using Arduinos, the extra features that openFrameworks provides may make it hard to decide where to go and what to do. Try out some of the ideas listed below; they came up during a few brainstorming sessions. These ideas should help further your exploration of openFrameworks while providing more experience with the platform.</p>
<ul class="bulleted">
<li>Use a keypad to select a song from a playlist (i.e., make a jukebox).</li>
<li>Make a small game using an old hard drive motor for the input controls.</li>
<li>Create a logging system that records data to a database such as MySQL using Arduino and openFrameworks.</li>
<li>Build a dynamic scrolling LED marquee that also displays the characters being typed on the computer screen.</li>
<li>Create an RGB LED array to build a mood light that changes in response to audio or visual cues.</li>
</ul>
<p id="Sec19" class="Heading1">Summary</p>
<p class="noindent">This chapter discussed the fundamental steps to integrate openFrameworks with Arduino. As a development tool, openFrameworks may provide the catalyst that can take a good idea to the next step. Its versatility is only increased by providing two great ways to develop: using serial or Firmata. With time and use, most developers will find a preference for one method over the other.</p>
<p class="indent">openFrameworks has a lot more functionality than can be covered here, but this chapter should provide you the knowledge and confidence to delve deeper into openFrameworks. Also check out other resources available; the forums at <span class="FontName2"><a href="http://www.arduino.cc/">www.arduino.cc/</a></span> and <span class="FontName2"><a href="http://www.openframeworks.cc/">www.openframeworks.cc/</a></span> are great places to find more information. The examples included with openFrameworks can also provide excellent insight.</p>
</div>
</div>
</div></div></div></body>
</html>